basePath: /
definitions:
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.NoteRequest:
    properties:
      content:
        type: string
      title:
        type: string
    type: object
  models.RefreshRequest:
    properties:
      token:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  models.Response:
    properties:
      data:
        additionalProperties: {}
        type: object
      message:
        type: string
      success:
        type: boolean
    type: object
host: localhost:8080
info:
  contact:
    email: ebubekiryigit6@gmail.com
    name: Ebubekir YiÄŸit
    url: https://github.com/ebubekiryigit
  description: GoLang - Gin - RESTful - MongoDB - Redis
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  termsOfService: https://swagger.io/terms/
  title: GoLang Rest API Starter Doc
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: login a user
      parameters:
      - description: Login Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: refreshes a user token
      parameters:
      - description: Refresh Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Refresh
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: registers a user
      parameters:
      - description: Register Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      summary: Register
      tags:
      - auth
  /notes:
    get:
      consumes:
      - application/json
      description: gets user notes with pagination
      parameters:
      - description: Switch page by 'page'
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Notes
      tags:
      - notes
    post:
      consumes:
      - application/json
      description: creates a new note
      parameters:
      - description: Note Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.NoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Create Note
      tags:
      - notes
  /notes/{id}:
    delete:
      consumes:
      - application/json
      description: deletes note by id
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Delete a note
      tags:
      - notes
    get:
      consumes:
      - application/json
      description: get note by id
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Get a note
      tags:
      - notes
    put:
      consumes:
      - application/json
      description: updates a note by id
      parameters:
      - description: Note ID
        in: path
        name: id
        required: true
        type: string
      - description: Note Request
        in: body
        name: req
        required: true
        schema:
          $ref: '#/definitions/models.NoteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - ApiKeyAuth: []
      summary: Update a note
      tags:
      - notes
  /ping:
    get:
      consumes:
      - application/json
      description: check server
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
      summary: Ping
      tags:
      - ping
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Bearer-Token
    type: apiKey
swagger: "2.0"
